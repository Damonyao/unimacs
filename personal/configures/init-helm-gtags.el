;;; init-helm-gtags.el --- configure for helm gtags
;;; Commentary:
;; comments

;;; Code:

(use-package helm-gtags
  :defer t
  :bind (    ("M-t" . helm-gtags-find-tag)
             ("M-r" . helm-gtags-find-rtag-adapter)
             ("M-s" . helm-gtags-find-symbol)
             ("C-c M-f" . helm-gtags-find-files)
             ("C-c M-g" . helm-gtags-find-pattern)
             ("C-t" . helm-gtags-pop-stack)
             ("C-c <" . helm-gtags-previous-history)
             ("C-c >" . helm-gtags-next-history)
             ("C-c s s" . helm-gtags-show-stack))
  :config
  (setq helm-c-gtags-path-style 'relative)
  (setq helm-c-gtags-ignore-case t)
  (setq helm-c-gtags-read-only t)

  (defun helm-gtags-find-rtag-for-ctags (tag)
    "TODO: Workaround for ctags rtags: Use TAG to find all matches, then filter procs."
    (helm-gtags--common '(helm-source-gtags-pattern) (format "\\<%s\\>" tag )))
  (defun helm-gtags-find-rtag-adapter (tag)
    "Workaround for tcl rtags: TAG: choose function according to major mode."
    (interactive
     (list (helm-gtags--read-tagname 'tag)))
    (if (member major-mode '(c-mode c++-mode objc-mode java-mode))
        (helm-gtags-find-rtag tag)
      (helm-gtags-find-rtag-for-ctags tag)))

  (defadvice helm-gtags-find-pattern (before helm-gtags-find-pattern activate)
    "Ignore case when use pattern to search."
    (setq helm-gtags-ignore-case t))
  (defadvice helm-gtags-find-pattern (after helm-gtags-find-pattern activate)
    "Don't ignore case when find definition and reference."
    (setq helm-gtags-ignore-case nil))

  (defadvice helm-gtags-update-tags (before helm-gtags-update-tags activate)
    "Use correct GTAGSLABEL, before update."
    (if (member major-mode '(c-mode c++-mode objc-mode java-mode))
        (setenv "GTAGSLABEL" nil)
      (setenv "GTAGSLABEL" "ctags")))

  (defun helm-gtags-delete-tags ()
    "Delete file GTAGS, GRTAGS, GPATH, ID etc. generated by gtags."
    (interactive)
    (let* ((root-dir (helm-gtags--tag-directory))
           (re (concat "\\`" (regexp-opt '("GPATH" "GRTAGS" "GTAGS" "ID")) "\\'"))
           (files (cl-remove-if-not
                   (lambda (file)
                     ;; Don't trust `directory-files'.
                     (let ((case-fold-search nil))
                       (string-match-p re (file-name-nondirectory file))))
                   (directory-files root-dir t re)))
           (buffer "*GTags File List*"))
      (or files (user-error "No tag files found"))
      (with-output-to-temp-buffer buffer
        (princ (mapconcat #'identity files "\n")))

      (let ((win (get-buffer-window buffer)))
        (unwind-protect
            (progn
              (fit-window-to-buffer win)
              (when (yes-or-no-p "Remove GNU Global tag files? ")
                (with-demoted-errors (mapc #'delete-file files))
                ))
          (when (window-live-p win)
            (quit-window t win))))
      ))

  (defun my-helm-gtags-init ()
    (require 'helm-gtags)
    (helm-gtags-mode)

    (setq helm-gtags-update-interval-second nil)
    (setq helm-gtags-path-style 'root)
    (setq helm-gtags-ignore-case nil)
    (setq helm-gtags-read-only nil)
    (setq helm-gtags-auto-update t)
    (setq helm-gtags-pulse-at-cursor t)
    (setq helm-gtags-cache-select-result t)
    (setq helm-gtags-cache-max-result-size (* 10 1024 1024)) ;10M
    )
  (add-hook 'prog-mode-hook 'my-helm-gtags-init)

  )
(provide 'init-helm-gtags)
;;; init-helm-gtags.el ends here