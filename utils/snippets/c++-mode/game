# -*- mode: snippet; require-final-newline: nil -*-
# name: game
# key: game
# binding: direct-keybinding
# --
// INCLUDES ///////////////////////////////////////////////////

#define WIN32_LEAN_AND_MEAN // include all macros
#define INITGUID            // include all GUIDs

#include <windows.h>        // include important windows stuff
#include <windowsx.h>
#include <mmsystem.h>

#include <iostream>       // include important C/C++ stuff
#include <conio.h>
#include <stdlib.h>
#include <malloc.h>
#include <memory.h>
#include <string.h>
#include <stdarg.h>
#include <stdio.h>
#include <math.h>
#include <io.h>
#include <fcntl.h>

#include <ddraw.h>          // directX includes

// DEFINES ////////////////////////////////////////////////////

// defines for windows
#define WINDOW_CLASS_NAME "WIN3DCLASS"  // class name

#define WINDOW_WIDTH            640     // size of window
#define WINDOW_HEIGHT           480
// MACROS /////////////////////////////////////////////////////

// these read the keyboard asynchronously
#define KEY_DOWN(vk_code) ((GetAsyncKeyState(vk_code) & 0x8000) ? 1 : 0)
#define KEY_UP(vk_code)   ((GetAsyncKeyState(vk_code) & 0x8000) ? 0 : 1)

// TYPES //////////////////////////////////////////////////////

// basic unsigned types
typedef unsigned short USHORT;
typedef unsigned short WORD;
typedef unsigned char  UCHAR;
typedef unsigned char  BYTE;

// states for game loop
#define GAME_STATE_INIT         0
#define GAME_STATE_START_LEVEL  1
#define GAME_STATE_RUN          2
#define GAME_STATE_SHUTDOWN     3
#define GAME_STATE_EXIT         4

// PROTOTYPES /////////////////////////////////////////////////

// game console
int Game_Init(void *parms=NULL);
int Game_Shutdown(void *parms=NULL);
void Real_Game(void *parms=NULL);
int Game_Main(void *parms=NULL);

// clock functions
DWORD Start_Clock(void);
DWORD Get_Clock(void);
DWORD Wait_Clock(DWORD count);

// GLOBALS ////////////////////////////////////////////////////

HWND main_window_handle  = NULL; // save the window handle
HINSTANCE main_instance  = NULL; // save the instance
int game_state           = GAME_STATE_INIT; // starting state

DWORD  start_clock_count = 0; // used for timing

// FUNCTIONS //////////////////////////////////////////////////

LRESULT CALLBACK WindowProc(HWND   hwnd,
						    UINT   msg,
                            WPARAM wparam,
                            LPARAM lparam)
{
    // this is the main message handler of the system
    PAINTSTRUCT	ps;		   // used in WM_PAINT
    HDC			hdc;	   // handle to a device context

    // what is the message
    switch(msg)
	{
        case WM_CREATE:
        {
            // do initialization stuff here
            return(0);
		} break;

        case WM_PAINT:
        {
            // start painting
            hdc = BeginPaint(hwnd,&ps);

            // the window is now validated

            // end painting
            EndPaint(hwnd,&ps);
            return(0);
        } break;

        case WM_DESTROY:
		{
            // kill the application
            PostQuitMessage(0);
            return(0);
		} break;

        default:break;

    } // end switch

    // process any messages that we didn't take care of
    return (DefWindowProc(hwnd, msg, wparam, lparam));

} // end WinProc

// WINMAIN ////////////////////////////////////////////////////

int WINAPI WinMain(	HINSTANCE hinstance,
					HINSTANCE hprevinstance,
					LPSTR     lpcmdline,
					int       ncmdshow)
{
    // this is the winmain function
    WNDCLASSEXA winclass; // this will hold the class we create
    HWND        hwnd;     // generic window handle
    MSG         msg;      // generic message
    HDC         hdc;      // generic dc
    PAINTSTRUCT ps;       // generic paintstruct

    // first fill in the window class stucture
    winclass.cbSize        = sizeof(WNDCLASSEXA);
    winclass.style         = CS_DBLCLKS | CS_OWNDC |
                             CS_HREDRAW | CS_VREDRAW;
    winclass.lpfnWndProc   = WindowProc;
    winclass.cbClsExtra    = 0;
    winclass.cbWndExtra    = 0;
    winclass.hInstance     = hinstance;
    winclass.hIcon         = LoadIcon(NULL, IDI_APPLICATION);
    winclass.hCursor       = LoadCursor(NULL, IDC_ARROW);
    winclass.hbrBackground = (HBRUSH)GetStockObject(BLACK_BRUSH);
    winclass.lpszMenuName  = NULL;
    winclass.lpszClassName = WINDOW_CLASS_NAME;
    winclass.hIconSm       = LoadIcon(NULL, IDI_APPLICATION);

    // register the window class
    if (!RegisterClassExA(&winclass))
        return(0);

    // create the window, note the use of WS_POPUP
    if (!(hwnd = CreateWindowExA(NULL,
                WINDOW_CLASS_NAME,    // class
                "WIN3D Game Console",	// title
                WS_POPUP | WS_VISIBLE,
                0,0,	                // initial x,y
                GetSystemMetrics(SM_CXSCREEN),  // intial width
                GetSystemMetrics(SM_CYSCREEN),  // initial height
                NULL,	    // handle to parent
                NULL,	    // handle to menu
                hinstance,// instance
                NULL)))	// creation parms
        return(0);

    // hide mouse
    ShowCursor(FALSE);

    // save the window handle and instance in a global
    main_window_handle = hwnd;
    main_instance      = hinstance;

    // perform all game console specific initialization
    Game_Init();

    // enter main event loop
    while(1)
	{
        if (PeekMessage(&msg,NULL,0,0,PM_REMOVE))
		{
            // test if this is a quit
            if (msg.message == WM_QUIT)
                break;

            // translate any accelerator keys
            TranslateMessage(&msg);

            // send the message to the window proc
            DispatchMessage(&msg);
		} // end if

        // main game processing goes here
        Game_Main();

	} // end while

    // shutdown game and release all resources
    Game_Shutdown();

    // show mouse
    ShowCursor(TRUE);

    // return to Windows like this
    return(msg.wParam);

} // end WinMain

// T3DX GAME PROGRAMMING CONSOLE FUNCTIONS ////////////////////

///////////////////////////////////////////////////////////////

DWORD Start_Clock(void)
{
    // this function starts the clock, that is, saves the current
    // count, use in conjunction with Wait_Clock()

    return(start_clock_count = Get_Clock());

} // end Start_Clock

///////////////////////////////////////////////////////////////

DWORD Get_Clock(void)
{
    // this function returns the current tick count

    // return time
    return(GetTickCount());

} // end Get_Clock

///////////////////////////////////////////////////////////////

DWORD Wait_Clock(DWORD count)
{
    // this function is used to wait for a specific number of clicks
    // since the call to Start_Clock

    while((Get_Clock() - start_clock_count) < count);
    return(Get_Clock());

} // end Wait_Clock

int Game_Init(void *parms)
{
    // this function is where you do all the initialization
    // for your game


    // return success
    return(1);

} // end Game_Init

///////////////////////////////////////////////////////////////

int Game_Shutdown(void *parms)
{
    // this function is where you shutdown your game and
    // release all resources that you allocated


    // return success
    return(1);

} // end Game_Shutdown

///////////////////////////////////////////////////////////////
void Real_Game(void *parms)
{
    char buffer[80]; // used to print text
    sprintf(buffer, "%s", "Hello, world!");
    Draw_Text_GDI(buffer, 10, 10, 127);
    if (KEY_DOWN(VK_LEFT))
    {
    }
} // end Real_Game

///////////////////////////////////////////////////////////////

int Game_Main(void *parms)
{
    // this is the workhorse of your game it will be called
    // continuously in real-time this is like main() in C
    // all the calls for you game go here!

    char buffer[80]; // used to print text

    // what state is the game in?
    if (game_state == GAME_STATE_INIT)
    {
        // initialize everything here graphics
        DD_Init(SCREEN_WIDTH, SCREEN_HEIGHT, SCREEN_BPP);

        // seed the random number generator
        // so game is different each play
        srand(Start_Clock());

        // transition to start level state
        game_state = GAME_STATE_START_LEVEL;

    } // end if
    ////////////////////////////////////////////////////////////////
    else
        if (game_state == GAME_STATE_START_LEVEL)
        {
            // get a new level ready to run

            // transition to run state
            game_state = GAME_STATE_RUN;

        } // end if
    ///////////////////////////////////////////////////////////////
        else
            if (game_state == GAME_STATE_RUN)
            {
                // start the timing clock
                Start_Clock();

                // The real game.
                Real_Game();

                // flip the surfaces
                DD_Flip();

                // sync to 33ish fps
                Wait_Clock(30);

                // check of user is trying to exit
                if (KEY_DOWN(VK_ESCAPE))
                {
                    // send message to windows to exit
                    PostMessage(main_window_handle, WM_DESTROY,0,0);

                    // set exit state
                    game_state = GAME_STATE_SHUTDOWN;

                } // end if

            } // end if
    ///////////////////////////////////////////////////////////////
            else
                if (game_state == GAME_STATE_SHUTDOWN)
                {
                    // in this state shut everything down and release resources

                    // switch to exit state
                    game_state = GAME_STATE_EXIT;

                } // end if

    // return success
    return(1);

} // end Game_Main

///////////////////////////////////////////////////////////////